#include <kipr/wombat.h>

void forward(int distance);
void reverse(int distance);
void arm_up();
void arm_down();
void turn_left(int distance);
void test_arm_servo();

int main()
{	
  	
    enable_servos();
	msleep(20);
    test_arm_servo();   
    msleep(20);
 	forward(4800);
    msleep(20);
    turn_left(1000);
    msleep(20);
    forward(1900);
	msleep(20);
    turn_left(1200);
	msleep(20);
	forward(4000);
	msleep(20);
	arm_down();
	msleep(30);
    reverse(1000);
    arm_up();
   	disable_servos();
    
    return 0;
    
}


//-----------------------------------------------------
//drive forward
//----------------------------------------------------- 
void forward(int distance)
{
    cmpc(0);
    while (gmpc(0) < distance)
    {
        motor(0,100);				//forward
        motor(1,100);
    }
    ao();
}
//-----------------------------------------------------
//drive reverse
//-----------------------------------------------------
void reverse(int distance)
{
    cmpc(0);
    while (gmpc(0) > -distance)
    {
        motor(0,-100);				//reverse
        motor(1,-100);
    }
    ao();
}
//---------------------------------------------------
//drive left
//---------------------------------------------------
void turn_left(int distance)
{
    cmpc(0);
    while(gmpc(0) < distance)
    {
        motor(0,500);			//turn left
        motor(1,-500);			
    }
    ao();
}
#define DN_POS  	1400		//1060
#define UP_POS		2064
#define ARM_SPD 	20
//--------------------------------------------------
//arm up
//--------------------------------------------------
void arm_up()
{
    int pos;
    
    for (pos=DN_POS;pos<UP_POS;pos=pos+10)
    {
   		set_servo_position(0,pos);	//arm up
        printf("UP %d\n",pos);
        msleep(ARM_SPD);
    }

}
//--------------------------------------------------
//arm down
//--------------------------------------------------
void arm_down()
{
    int pos;
   
    for (pos=UP_POS;pos>DN_POS;pos=pos-10)
    {
   		set_servo_position(0,pos);	//arm down
        printf("DN %d\n",pos);
        msleep(ARM_SPD);
    }
   
} 
//--------------------------------------------------
//test arm servo - cycle 3 times
//--------------------------------------------------
void test_arm_servo()
{
    int i;
    
    for (i=0;i<2;i++)
    {
    	arm_down();
    	msleep(500);
    	arm_up();
    	msleep(500);
    }
    
  	disable_servos();
	return;
}
